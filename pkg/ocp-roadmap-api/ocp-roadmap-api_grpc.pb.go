// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_roadmap_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpRoadmapApiClient is the client API for OcpRoadmapApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpRoadmapApiClient interface {
	CreateRoadmap(ctx context.Context, in *CreateRoadmapRequest, opts ...grpc.CallOption) (*CreateRoadmapResponse, error)
	MultiCreateRoadmaps(ctx context.Context, in *MultiCreateRoadmapRequest, opts ...grpc.CallOption) (*MultiCreateRoadmapResponse, error)
	UpdateRoadmap(ctx context.Context, in *UpdateRoadmapRequest, opts ...grpc.CallOption) (*UpdateRoadmapResponse, error)
	DescribeRoadmap(ctx context.Context, in *DescribeRoadmapRequest, opts ...grpc.CallOption) (*DescribeRoadmapResponse, error)
	ListRoadmap(ctx context.Context, in *ListRoadmapRequest, opts ...grpc.CallOption) (*ListRoadmapResponse, error)
	RemoveRoadmap(ctx context.Context, in *RemoveRoadmapRequest, opts ...grpc.CallOption) (*RemoveRoadmapResponse, error)
}

type ocpRoadmapApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpRoadmapApiClient(cc grpc.ClientConnInterface) OcpRoadmapApiClient {
	return &ocpRoadmapApiClient{cc}
}

func (c *ocpRoadmapApiClient) CreateRoadmap(ctx context.Context, in *CreateRoadmapRequest, opts ...grpc.CallOption) (*CreateRoadmapResponse, error) {
	out := new(CreateRoadmapResponse)
	err := c.cc.Invoke(ctx, "/ocp.roadmap.api.OcpRoadmapApi/CreateRoadmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRoadmapApiClient) MultiCreateRoadmaps(ctx context.Context, in *MultiCreateRoadmapRequest, opts ...grpc.CallOption) (*MultiCreateRoadmapResponse, error) {
	out := new(MultiCreateRoadmapResponse)
	err := c.cc.Invoke(ctx, "/ocp.roadmap.api.OcpRoadmapApi/MultiCreateRoadmaps", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRoadmapApiClient) UpdateRoadmap(ctx context.Context, in *UpdateRoadmapRequest, opts ...grpc.CallOption) (*UpdateRoadmapResponse, error) {
	out := new(UpdateRoadmapResponse)
	err := c.cc.Invoke(ctx, "/ocp.roadmap.api.OcpRoadmapApi/UpdateRoadmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRoadmapApiClient) DescribeRoadmap(ctx context.Context, in *DescribeRoadmapRequest, opts ...grpc.CallOption) (*DescribeRoadmapResponse, error) {
	out := new(DescribeRoadmapResponse)
	err := c.cc.Invoke(ctx, "/ocp.roadmap.api.OcpRoadmapApi/DescribeRoadmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRoadmapApiClient) ListRoadmap(ctx context.Context, in *ListRoadmapRequest, opts ...grpc.CallOption) (*ListRoadmapResponse, error) {
	out := new(ListRoadmapResponse)
	err := c.cc.Invoke(ctx, "/ocp.roadmap.api.OcpRoadmapApi/ListRoadmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRoadmapApiClient) RemoveRoadmap(ctx context.Context, in *RemoveRoadmapRequest, opts ...grpc.CallOption) (*RemoveRoadmapResponse, error) {
	out := new(RemoveRoadmapResponse)
	err := c.cc.Invoke(ctx, "/ocp.roadmap.api.OcpRoadmapApi/RemoveRoadmap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpRoadmapApiServer is the server API for OcpRoadmapApi service.
// All implementations must embed UnimplementedOcpRoadmapApiServer
// for forward compatibility
type OcpRoadmapApiServer interface {
	CreateRoadmap(context.Context, *CreateRoadmapRequest) (*CreateRoadmapResponse, error)
	MultiCreateRoadmaps(context.Context, *MultiCreateRoadmapRequest) (*MultiCreateRoadmapResponse, error)
	UpdateRoadmap(context.Context, *UpdateRoadmapRequest) (*UpdateRoadmapResponse, error)
	DescribeRoadmap(context.Context, *DescribeRoadmapRequest) (*DescribeRoadmapResponse, error)
	ListRoadmap(context.Context, *ListRoadmapRequest) (*ListRoadmapResponse, error)
	RemoveRoadmap(context.Context, *RemoveRoadmapRequest) (*RemoveRoadmapResponse, error)
	mustEmbedUnimplementedOcpRoadmapApiServer()
}

// UnimplementedOcpRoadmapApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpRoadmapApiServer struct {
}

func (UnimplementedOcpRoadmapApiServer) CreateRoadmap(context.Context, *CreateRoadmapRequest) (*CreateRoadmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoadmap not implemented")
}
func (UnimplementedOcpRoadmapApiServer) MultiCreateRoadmaps(context.Context, *MultiCreateRoadmapRequest) (*MultiCreateRoadmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateRoadmaps not implemented")
}
func (UnimplementedOcpRoadmapApiServer) UpdateRoadmap(context.Context, *UpdateRoadmapRequest) (*UpdateRoadmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoadmap not implemented")
}
func (UnimplementedOcpRoadmapApiServer) DescribeRoadmap(context.Context, *DescribeRoadmapRequest) (*DescribeRoadmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRoadmap not implemented")
}
func (UnimplementedOcpRoadmapApiServer) ListRoadmap(context.Context, *ListRoadmapRequest) (*ListRoadmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRoadmap not implemented")
}
func (UnimplementedOcpRoadmapApiServer) RemoveRoadmap(context.Context, *RemoveRoadmapRequest) (*RemoveRoadmapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRoadmap not implemented")
}
func (UnimplementedOcpRoadmapApiServer) mustEmbedUnimplementedOcpRoadmapApiServer() {}

// UnsafeOcpRoadmapApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpRoadmapApiServer will
// result in compilation errors.
type UnsafeOcpRoadmapApiServer interface {
	mustEmbedUnimplementedOcpRoadmapApiServer()
}

func RegisterOcpRoadmapApiServer(s grpc.ServiceRegistrar, srv OcpRoadmapApiServer) {
	s.RegisterService(&OcpRoadmapApi_ServiceDesc, srv)
}

func _OcpRoadmapApi_CreateRoadmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoadmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRoadmapApiServer).CreateRoadmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.roadmap.api.OcpRoadmapApi/CreateRoadmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRoadmapApiServer).CreateRoadmap(ctx, req.(*CreateRoadmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRoadmapApi_MultiCreateRoadmaps_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateRoadmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRoadmapApiServer).MultiCreateRoadmaps(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.roadmap.api.OcpRoadmapApi/MultiCreateRoadmaps",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRoadmapApiServer).MultiCreateRoadmaps(ctx, req.(*MultiCreateRoadmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRoadmapApi_UpdateRoadmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoadmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRoadmapApiServer).UpdateRoadmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.roadmap.api.OcpRoadmapApi/UpdateRoadmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRoadmapApiServer).UpdateRoadmap(ctx, req.(*UpdateRoadmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRoadmapApi_DescribeRoadmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRoadmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRoadmapApiServer).DescribeRoadmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.roadmap.api.OcpRoadmapApi/DescribeRoadmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRoadmapApiServer).DescribeRoadmap(ctx, req.(*DescribeRoadmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRoadmapApi_ListRoadmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRoadmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRoadmapApiServer).ListRoadmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.roadmap.api.OcpRoadmapApi/ListRoadmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRoadmapApiServer).ListRoadmap(ctx, req.(*ListRoadmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRoadmapApi_RemoveRoadmap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRoadmapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRoadmapApiServer).RemoveRoadmap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.roadmap.api.OcpRoadmapApi/RemoveRoadmap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRoadmapApiServer).RemoveRoadmap(ctx, req.(*RemoveRoadmapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpRoadmapApi_ServiceDesc is the grpc.ServiceDesc for OcpRoadmapApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpRoadmapApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.roadmap.api.OcpRoadmapApi",
	HandlerType: (*OcpRoadmapApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoadmap",
			Handler:    _OcpRoadmapApi_CreateRoadmap_Handler,
		},
		{
			MethodName: "MultiCreateRoadmaps",
			Handler:    _OcpRoadmapApi_MultiCreateRoadmaps_Handler,
		},
		{
			MethodName: "UpdateRoadmap",
			Handler:    _OcpRoadmapApi_UpdateRoadmap_Handler,
		},
		{
			MethodName: "DescribeRoadmap",
			Handler:    _OcpRoadmapApi_DescribeRoadmap_Handler,
		},
		{
			MethodName: "ListRoadmap",
			Handler:    _OcpRoadmapApi_ListRoadmap_Handler,
		},
		{
			MethodName: "RemoveRoadmap",
			Handler:    _OcpRoadmapApi_RemoveRoadmap_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-roadmap-api/ocp-roadmap-api.proto",
}
